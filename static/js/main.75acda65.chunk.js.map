{"version":3,"sources":["Circle.js","GameOver.js","asset/sound/Stock.mp3","App.js","index.js"],"names":["Circle","props","className","color","active","onClick","click","GameOver","text","score","window","location","reload","id","clickedSound","Audio","mySound","randNum","min","max","Math","floor","random","App","state","circles","current","round","result","start","clicked","stop","SPEED","clickHandler","console","log","play","clearGame","pause","setState","nextCircle","nextActive","timer","setTimeout","startGame","clearTimeout","this","map","circle","disabled","Component","ReactDOM","render","document","getElementById"],"mappings":"8OAceA,MAZf,SAAgBC,GAId,OACE,qBACEC,UAAS,iBAAYD,EAAME,MAAlB,YAA2BF,EAAMG,OAAS,SAAW,IAC9DC,QAASJ,EAAMK,SCqBNC,MA5Bf,SAAkBN,GAChB,IAGIO,EAUJ,OAPEA,EADEP,EAAMQ,OAAS,EACV,qBACER,EAAMQ,MAAQ,GAAKR,EAAMQ,MAAQ,EACnC,0BAEA,oBAIP,qBAAKP,UAAU,WAAf,SACE,sBAAKA,UAAU,SAAf,UACE,2CACA,wCAAWD,EAAMQ,SACjB,4BAAID,IACJ,wBAAQH,QAnBA,WACZK,OAAOC,SAASC,UAkBYC,GAAG,QAA3B,yBCtBO,MAA0B,kCCSrCC,EAAe,IAAIC,MAAMC,GAEvBC,EAAU,SAACC,EAAKC,GACpB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,IAAQA,GAgIpCK,E,4MA5HbC,MAAQ,CACNC,QAAS,CACP,CACEZ,GAAI,GAEN,CACEA,GAAI,GAEN,CACEA,GAAI,GAEN,CACEA,GAAI,IAGRJ,MAAO,EACPiB,QAAS,EACTC,MAAO,EACPC,QAAQ,EACRC,OAAO,EACPC,SAAS,EACTC,MAAM,G,EAIRC,MAAQ,I,EAERC,aAAe,SAACpB,GAId,GAHAqB,QAAQC,IAAR,sBAA2BtB,IAC3BC,EAAasB,OAET,EAAKZ,MAAME,UAAYb,EAGzB,OAFA,EAAKwB,iBACLvB,EAAawB,SAIY,IAAvB,EAAKd,MAAMM,SACb,EAAKS,SAAS,CACZT,SAAS,EACTrB,MAAO,EAAKe,MAAMf,MAAQ,EAC1BkB,MAAO,K,EAKba,WAAa,WACX,GAAI,EAAKhB,MAAMG,OAAS,EACtB,EAAKU,gBADP,CAKA,IAAII,EAOJ,GACEA,EAAaxB,EAAQ,EAAG,SACjBwB,IAAe,EAAKjB,MAAME,SAInC,EAAKa,SAAS,CACZb,QAASe,EACTd,MAAO,EAAKH,MAAMG,MAAQ,EAC1BG,SAAS,IAGXI,QAAQC,IAAR,yBAA8B,EAAKX,MAAME,UAEzC,EAAKM,OAAS,GACd,EAAKU,MAAQC,WAAW,EAAKH,WAAY,EAAKR,OAC9CE,QAAQC,IAAI,aAAc,EAAKH,S,EAGjCY,UAAY,WACV,EAAKJ,aACL,EAAKD,SAAS,CACZV,OAAO,EACPE,MAAM,K,EAIVM,UAAY,WACVQ,aAAa,EAAKH,OAClB,EAAKH,SAAS,CACZX,QAAQ,K,4CAIZ,WAAU,IAAD,OACDH,EAAUqB,KAAKtB,MAAMC,QAAQsB,KAAI,SAACC,GACtC,OACE,cAAC,EAAD,CAEEnC,GAAImC,EAAOnC,GACXV,MAAO6C,EAAO7C,MACdG,MAAO,kBAAM,EAAK2B,aAAae,EAAOnC,KACtCT,OAAQ,EAAKoB,MAAME,UAAYsB,EAAOnC,IAJjCmC,EAAOnC,OAQlB,OACE,sBAAKX,UAAU,MAAf,UACE,4CACA,wCAAW4C,KAAKtB,MAAMf,SACtB,qBAAKP,UAAU,cAAf,SACGuB,IAEH,wBAAQpB,QAASyC,KAAKF,UAAWK,SAAUH,KAAKtB,MAAMK,MAAtD,mBAGA,wBAAQxB,QAASyC,KAAKT,UAAWY,SAAUH,KAAKtB,MAAMO,KAAtD,kBAGCe,KAAKtB,MAAMI,QAAU,cAAC,EAAD,CAAUnB,MAAOqC,KAAKtB,MAAMf,e,GAvHxCyC,aCVlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.75acda65.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Circle(props) {\r\n  // const clicked = () => {\r\n  //   console.log(`You clicked ${props.id}`);\r\n  // };\r\n  return (\r\n    <div\r\n      className={`circle ${props.color} ${props.active ? \"active\" : \"\"}`}\r\n      onClick={props.click} /* onClick={clicked} */\r\n    ></div>\r\n  ); // style={{backgroundColor: props.color}}\r\n}\r\n\r\nexport default Circle;\r\n","import React from \"react\";\r\n\r\nfunction GameOver(props) {\r\n  const reset = () => {\r\n    window.location.reload();\r\n  };\r\n  let text;\r\n\r\n  if (props.score <= 3) {\r\n    text = \"C'mon! Let's play!\";\r\n  } else if (props.score > 3 && props.score < 7) {\r\n    text = \"Looking good my friend!\";\r\n  } /* if (props.score > 7) */ else {\r\n    text = \"Wow! Look at you!\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"gameOver\">\r\n      <div className=\"result\">\r\n        <h1>GAME OVER</h1>\r\n        <p>Score: {props.score}</p>\r\n        <p>{text}</p>\r\n        <button onClick={reset} id=\"close\">\r\n          Close\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameOver;\r\n","export default __webpack_public_path__ + \"static/media/Stock.fc1395a7.mp3\";","import \"./App.css\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nimport Circle from \"./Circle\";\r\nimport GameOver from \"./GameOver\";\r\n\r\nimport mySound from \"./asset/sound/Stock.mp3\";\r\n\r\nlet clickedSound = new Audio(mySound);\r\n\r\nconst randNum = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}; // returns a randnum between included min and excluded max\r\n\r\nclass App extends Component {\r\n  state = {\r\n    circles: [\r\n      {\r\n        id: 1,\r\n      },\r\n      {\r\n        id: 2,\r\n      },\r\n      {\r\n        id: 3,\r\n      },\r\n      {\r\n        id: 4,\r\n      },\r\n    ],\r\n    score: 0,\r\n    current: 0,\r\n    round: 0,\r\n    result: false,\r\n    start: false,\r\n    clicked: false,\r\n    stop: true,\r\n  };\r\n\r\n  timer;\r\n  SPEED = 1000;\r\n\r\n  clickHandler = (id) => {\r\n    console.log(`You clicked ${id}`);\r\n    clickedSound.play();\r\n\r\n    if (this.state.current !== id) {\r\n      this.clearGame();\r\n      clickedSound.pause();\r\n      return;\r\n    }\r\n\r\n    if (this.state.clicked === false) {\r\n      this.setState({\r\n        clicked: true,\r\n        score: this.state.score + 1,\r\n        round: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  nextCircle = () => {\r\n    if (this.state.round >= 3) {\r\n      this.clearGame();\r\n      return;\r\n    }\r\n\r\n    let nextActive;\r\n\r\n    //let current;\r\n    // do {\r\n    //   nextActive = randNum(0, 4);\r\n    // } while (current === nextActive);\r\n\r\n    do {\r\n      nextActive = randNum(1, 5);\r\n    } while (nextActive === this.state.current);\r\n\r\n    // current = nextActive;\r\n\r\n    this.setState({\r\n      current: nextActive,\r\n      round: this.state.round + 1,\r\n      clicked: false,\r\n    });\r\n\r\n    console.log(`Active circle: ${this.state.current}`);\r\n\r\n    this.SPEED -= 25;\r\n    this.timer = setTimeout(this.nextCircle, this.SPEED);\r\n    console.log(\"Speed now:\", this.SPEED);\r\n  };\r\n\r\n  startGame = () => {\r\n    this.nextCircle();\r\n    this.setState({\r\n      start: true,\r\n      stop: false,\r\n    });\r\n  };\r\n\r\n  clearGame = () => {\r\n    clearTimeout(this.timer);\r\n    this.setState({\r\n      result: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const circles = this.state.circles.map((circle) => {\r\n      return (\r\n        <Circle\r\n          key={circle.id}\r\n          id={circle.id}\r\n          color={circle.color}\r\n          click={() => this.clickHandler(circle.id)} // same as click={this.clickHandler.bind(this, circle.ido)}\r\n          active={this.state.current === circle.id}\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Speed Game</h1>\r\n        <p>Score: {this.state.score}</p>\r\n        <div className=\"circleGroup\" /* onClick={this.calScore} */>\r\n          {circles}\r\n        </div>\r\n        <button onClick={this.startGame} disabled={this.state.start}>\r\n          Start\r\n        </button>\r\n        <button onClick={this.clearGame} disabled={this.state.stop}>\r\n          Stop\r\n        </button>\r\n        {this.state.result && <GameOver score={this.state.score} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}